import SwiftUI
import PhotosUI
import UIKit

// MARK: - Image Picker View
struct ImagePickerView: UIViewControllerRepresentable {
    let sourceType: UIImagePickerController.SourceType
    let completion: (UIImage) -> Void
    @Environment(\.dismiss) private var dismiss
    
    func makeUIViewController(context: Context) -> UIImagePickerController {
        let picker = UIImagePickerController()
        picker.sourceType = sourceType
        picker.delegate = context.coordinator
        
        if sourceType == .camera {
            picker.cameraDevice = .rear
            picker.showsCameraControls = true
        }
        
        return picker
    }
    
    func updateUIViewController(_ uiViewController: UIImagePickerController, context: Context) {}
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, UIImagePickerControllerDelegate, UINavigationControllerDelegate {
        let parent: ImagePickerView
        
        init(_ parent: ImagePickerView) {
            self.parent = parent
        }
        
        func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
            if let image = info[.originalImage] as? UIImage {
                parent.completion(image)
            }
            parent.dismiss()
        }
        
        func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
            parent.dismiss()
        }
    }
}

// MARK: - Course Selection Sheet
struct CourseSelectionSheet: View {
    @Binding var selectedCourse: MealCourse?
    let onConfirm: () -> Void
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            VStack(spacing: 24) {
                Text("Categorize your photo")
                    .font(.title2)
                    .fontWeight(.semibold)
                    .multilineTextAlignment(.center)
                
                Text("This helps organize your meal (optional)")
                    .font(.subheadline)
                    .foregroundColor(.secondary)
                
                VStack(spacing: 12) {
                    ForEach(MealCourse.allCases, id: \.self) { course in
                        Button(action: {
                            selectedCourse = course
                        }) {
                            HStack {
                                Text(course.emoji)
                                    .font(.title2)
                                Text(course.displayName)
                                    .font(.headline)
                                Spacer()
                                if selectedCourse == course {
                                    Image(systemName: "checkmark.circle.fill")
                                        .foregroundColor(.orange)
                                }
                            }
                            .padding()
                            .background(selectedCourse == course ? Color.orange.opacity(0.1) : Color(.systemGray6))
                            .clipShape(RoundedRectangle(cornerRadius: 12))
                        }
                        .buttonStyle(.plain)
                    }
                    
                    Button(action: {
                        selectedCourse = nil
                    }) {
                        HStack {
                            Image(systemName: "minus.circle")
                                .font(.title2)
                            Text("No Category")
                                .font(.headline)
                            Spacer()
                            if selectedCourse == nil {
                                Image(systemName: "checkmark.circle.fill")
                                    .foregroundColor(.orange)
                            }
                        }
                        .padding()
                        .background(selectedCourse == nil ? Color.orange.opacity(0.1) : Color(.systemGray6))
                        .clipShape(RoundedRectangle(cornerRadius: 12))
                    }
                    .buttonStyle(.plain)
                }
                
                Spacer()
            }
            .padding()
            .navigationTitle("Category")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("Cancel") {
                        dismiss()
                    }
                }
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Confirm") {
                        onConfirm()
                        dismiss()
                    }
                    .fontWeight(.semibold)
                }
            }
        }
    }
}

// MARK: - Draft Meal Card
struct DraftMealCard: View {
    let draftMeal: MealWithPhotos
    let onTap: () -> Void
    let onDelete: () -> Void
    
    var body: some View {
        Button(action: onTap) {
            HStack(spacing: 12) {
                // Thumbnail
                Group {
                    if let primaryPhoto = draftMeal.primaryPhoto {
                        AsyncImage(url: URL(string: primaryPhoto.url)) { image in
                            image
                                .resizable()
                                .aspectRatio(contentMode: .fill)
                        } placeholder: {
                            RoundedRectangle(cornerRadius: 8)
                                .fill(Color(.systemGray5))
                        }
                    } else {
                        RoundedRectangle(cornerRadius: 8)
                            .fill(Color(.systemGray5))
                            .overlay(
                                Image(systemName: "photo")
                                    .foregroundColor(.gray)
                            )
                    }
                }
                .frame(width: 60, height: 60)
                .clipShape(RoundedRectangle(cornerRadius: 8))
                
                // Content
                VStack(alignment: .leading, spacing: 4) {
                    HStack {
                        Text(draftMeal.meal.title ?? "Untitled Meal")
                            .font(.headline)
                            .foregroundColor(.primary)
                        Spacer()
                        Text(timeAgoString(from: draftMeal.meal.lastActivityAt))
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                    
                    Text("\(draftMeal.photoCount) photo\(draftMeal.photoCount == 1 ? "" : "s")")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                    
                    if !draftMeal.coursesSummary.isEmpty && draftMeal.coursesSummary != "No categories" {
                        Text(draftMeal.coursesSummary)
                            .font(.caption)
                            .foregroundColor(.orange)
                    }
                }
                
                // Delete button
                Button(action: onDelete) {
                    Image(systemName: "trash")
                        .foregroundColor(.red)
                        .padding(8)
                }
                .buttonStyle(.plain)
            }
            .padding()
            .background(Color(.systemGray6).opacity(0.5))
            .clipShape(RoundedRectangle(cornerRadius: 12))
        }
        .buttonStyle(.plain)
    }
    
    private func timeAgoString(from date: Date) -> String {
        let now = Date()
        let interval = now.timeIntervalSince(date)
        
        if interval < 3600 { // Less than 1 hour
            let minutes = Int(interval / 60)
            return "\(minutes)m ago"
        } else if interval < 86400 { // Less than 1 day
            let hours = Int(interval / 3600)
            return "\(hours)h ago"
        } else {
            let days = Int(interval / 86400)
            return "\(days)d ago"
        }
    }
}

    // MARK: - Main AddMealView
struct AddMealView: View {
    @Environment(\.dismiss) private var dismiss
    @EnvironmentObject var mealService: MealService
    @EnvironmentObject var googlePlacesService: GooglePlacesService
    @EnvironmentObject var locationService: LocationService
    
    @State private var currentStep: AddMealStep = .draftSelection
    @State private var selectedDraft: MealWithPhotos?
    @State private var currentDraftId: UUID?
    @State private var pendingPhotos: [PhotoWithImage] = []
    @State private var showingCameraSelection = false
    @State private var showingPhotoLibrary = false
    @State private var showingCourseSelection = false
    @State private var selectedPhotoIndex: Int = 0
    @State private var photosPickerItems: [PhotosPickerItem] = []
    
    // Form data
    @State private var selectedMealType: MealType = .homemade
    @State private var title = ""
    @State private var description = ""
    @State private var ingredients = ""
    @State private var tags: [String] = []
    @State private var newTag = ""
    @State private var privacy: MealPrivacy = .public
    @State private var rating: Int = 0
    @State private var cost = ""
    @State private var selectedRestaurant: Restaurant?
    
    @State private var isProcessing = false
    @State private var showingSuccess = false
    @State private var showingDeleteAlert = false
    @State private var draftToDelete: MealWithPhotos?
    
    enum AddMealStep {
        case draftSelection
        case photoCapture
        case mealDetails
    }
    
    var body: some View {
        NavigationView {
            Group {
                switch currentStep {
                case .draftSelection:
                    draftSelectionView
                case .photoCapture:
                    photoCaptureView
                case .mealDetails:
                    mealDetailsView
                }
            }
        }
        .onAppear {
            Task {
                await mealService.fetchDraftMeals()
            }
        }
        .fullScreenCover(isPresented: $showingCameraSelection) {
            ImagePickerView(sourceType: .camera) { image in
                addPhoto(image: image)
            }
        }
        .sheet(isPresented: $showingPhotoLibrary) {
            ImagePickerView(sourceType: .photoLibrary) { image in
                addPhoto(image: image)
            }
        }
        .sheet(isPresented: $showingCourseSelection) {
            CourseSelectionSheet(
                selectedCourse: $pendingPhotos[selectedPhotoIndex].course,
                onConfirm: {
                    uploadPendingPhoto(at: selectedPhotoIndex)
                }
            )
        }
        .alert("Delete Draft?", isPresented: $showingDeleteAlert) {
            Button("Delete", role: .destructive) {
                if let draft = draftToDelete {
                    Task {
                        try? await mealService.deleteMeal(mealId: draft.id)
                    }
                }
            }
            Button("Cancel", role: .cancel) {}
        } message: {
            Text("This will permanently delete this draft meal and all its photos.")
        }
        .alert("Meal Published!", isPresented: $showingSuccess) {
            Button("OK") {
                dismiss()
            }
        } message: {
            Text("Your meal has been successfully published!")
        }
    }
    
    // MARK: - Draft Selection View
    private var draftSelectionView: some View {
        ScrollView {
            VStack(spacing: 20) {
                if mealService.isLoadingDrafts {
                    ProgressView("Loading drafts...")
                        .frame(maxWidth: .infinity, minHeight: 200)
                } else if mealService.draftMeals.isEmpty {
                    VStack(spacing: 16) {
                        Image(systemName: "camera.plus")
                            .font(.system(size: 60))
                            .foregroundColor(.gray)
                        
                        Text("Start Your First Meal")
                            .font(.title2)
                            .fontWeight(.semibold)
                        
                        Text("Take photos and build your meal portfolio")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                            .multilineTextAlignment(.center)
                    }
                    .padding(.top, 60)
                } else {
                    VStack(alignment: .leading, spacing: 16) {
                        Text("Continue Working On")
                            .font(.title2)
                            .fontWeight(.semibold)
                        
                        LazyVStack(spacing: 12) {
                            ForEach(mealService.draftMeals) { draft in
                                DraftMealCard(
                                    draftMeal: draft,
                                    onTap: {
                                        loadDraftMeal(draft)
                                    },
                                    onDelete: {
                                        draftToDelete = draft
                                        showingDeleteAlert = true
                                    }
                                )
                            }
                        }
                    }
                }
                
                // Start New Meal Button
                VStack(spacing: 12) {
                    if !mealService.draftMeals.isEmpty {
                        Divider()
                    }
                    
                    Button(action: startNewMeal) {
                        HStack {
                            Image(systemName: "plus.circle.fill")
                            Text("Start New Meal")
                                .fontWeight(.medium)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.orange)
                        .foregroundColor(.white)
                        .clipShape(RoundedRectangle(cornerRadius: 12))
                    }
                }
                .padding(.top, 8)
            }
            .padding(.horizontal, 20)
            .padding(.bottom, 100)
        }
        .navigationTitle("Add Meal")
        .navigationBarTitleDisplayMode(.large)
        .toolbar {
            ToolbarItem(placement: .navigationBarLeading) {
                Button("Close") {
                    dismiss()
                }
            }
        }
    }
    
    // MARK: - Photo Capture View
    private var photoCaptureView: some View {
        VStack(spacing: 30) {
            VStack(spacing: 16) {
                Image(systemName: "camera.plus")
                    .font(.system(size: 80))
                    .foregroundColor(.primary)
                
                Text("Add Photos")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                
                if !pendingPhotos.isEmpty {
                    Text("\(pendingPhotos.count) photo\(pendingPhotos.count == 1 ? "" : "s") ready to add")
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }
            }
            
            // Photo capture options
            VStack(spacing: 16) {
                Button(action: {
                    showingCameraSelection = true
                }) {
                    HStack {
                        Image(systemName: "camera.fill")
                        Text("Take Photo")
                            .fontWeight(.medium)
                    }
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color.black)
                    .foregroundColor(.white)
                    .clipShape(RoundedRectangle(cornerRadius: 12))
                }
                
                PhotosPicker(
                    selection: $photosPickerItems,
                    maxSelectionCount: 5,
                    matching: .images
                ) {
                    HStack {
                        Image(systemName: "photo.on.rectangle")
                        Text("Choose from Library")
                            .fontWeight(.medium)
                    }
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color(.systemGray6))
                    .foregroundColor(.primary)
                    .clipShape(RoundedRectangle(cornerRadius: 12))
                }
            }
            .padding(.horizontal, 20)
            
            // Pending photos preview
            if !pendingPhotos.isEmpty {
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 12) {
                        ForEach(Array(pendingPhotos.enumerated()), id: \.offset) { index, photoWithImage in
                            VStack(spacing: 4) {
                                ZStack(alignment: .topTrailing) {
                                    Image(uiImage: photoWithImage.image)
                                        .resizable()
                                        .aspectRatio(contentMode: .fill)
                                        .frame(width: 100, height: 100)
                                        .clipShape(RoundedRectangle(cornerRadius: 8))
                                    
                                    Button(action: {
                                        pendingPhotos.remove(at: index)
                                    }) {
                                        Image(systemName: "xmark.circle.fill")
                                            .foregroundColor(.white)
                                            .background(Color.black.opacity(0.6))
                                            .clipShape(Circle())
                                    }
                                    .padding(4)
                                }
                                
                                if let course = photoWithImage.course {
                                    Text(course.displayName)
                                        .font(.caption)
                                        .foregroundColor(.orange)
                                } else {
                                    Text("No category")
                                        .font(.caption)
                                        .foregroundColor(.gray)
                                }
                            }
                        }
                    }
                    .padding(.horizontal, 20)
                }
            }
            
            Spacer()
            
            // Action buttons
            if !pendingPhotos.isEmpty {
                VStack(spacing: 12) {
                    Button(action: uploadAllPendingPhotos) {
                        HStack {
                            if isProcessing {
                                ProgressView()
                                    .progressViewStyle(CircularProgressViewStyle(tint: .white))
                                    .scaleEffect(0.8)
                            }
                            Text(isProcessing ? "Adding Photos..." : "Continue with Details")
                        }
                        .font(.headline)
                        .foregroundColor(.white)
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.orange)
                        .clipShape(RoundedRectangle(cornerRadius: 12))
                    }
                    .disabled(isProcessing)
                    
                    Button("Save & Complete Later") {
                        saveDraftAndDismiss()
                    }
                    .font(.subheadline)
                    .foregroundColor(.orange)
                }
                .padding(.horizontal, 20)
            }
        }
        .navigationTitle("Add Photos")
        .navigationBarTitleDisplayMode(.inline)
        .toolbar {
            ToolbarItem(placement: .navigationBarLeading) {
                Button("Back") {
                    currentStep = .draftSelection
                }
            }
        }
        .onChange(of: photosPickerItems) { newItems in
            Task {
                for item in newItems {
                    if let data = try? await item.loadTransferable(type: Data.self),
                       let image = UIImage(data: data) {
                        await MainActor.run {
                            pendingPhotos.append(PhotoWithImage(image: image))
                        }
                    }
                }
                await MainActor.run {
                    photosPickerItems = []
                }
            }
        }
    }
    
    // MARK: - Meal Details View
    private var mealDetailsView: some View {
        ScrollView {
            VStack(spacing: 24) {
                // Current photos section
                if let draft = selectedDraft, !draft.photos.isEmpty {
                    photosSection
                }
                
                // Meal type selection
                mealTypeSection
                
                // Restaurant selection (if restaurant meal)
                if selectedMealType == .restaurant {
                    restaurantSection
                }
                
                // Meal details
                detailsSection
                
                // Tags section
                tagsSection
                
                // Action buttons
                actionButtons
            }
            .padding(.horizontal, 20)
            .padding(.bottom, 100)
        }
        .navigationTitle("Meal Details")
        .navigationBarTitleDisplayMode(.large)
        .toolbar {
            ToolbarItem(placement: .navigationBarLeading) {
                Button("Back") {
                    currentStep = .photoCapture
                }
            }
        }
    }
    
    // MARK: - View Components
    
    private var photosSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Photos")
                .font(.headline)
            
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(spacing: 12) {
                    if let draft = selectedDraft {
                        ForEach(draft.photos) { photo in
                            VStack(spacing: 4) {
                                AsyncImage(url: URL(string: photo.url)) { image in
                                    image
                                        .resizable()
                                        .aspectRatio(contentMode: .fill)
                                } placeholder: {
                                    RoundedRectangle(cornerRadius: 8)
                                        .fill(Color(.systemGray5))
                                }
                                .frame(width: 120, height: 120)
                                .clipShape(RoundedRectangle(cornerRadius: 8))
                                
                                if let course = photo.course {
                                    Text(course.displayName)
                                        .font(.caption)
                                        .foregroundColor(.orange)
                                }
                            }
                        }
                    }
                    
                    Button(action: {
                        currentStep = .photoCapture
                    }) {
                        VStack {
                            Image(systemName: "plus")
                                .font(.title2)
                            Text("Add More")
                                .font(.caption)
                        }
                        .foregroundColor(.gray)
                        .frame(width: 120, height: 120)
                        .background(Color(.systemGray6))
                        .clipShape(RoundedRectangle(cornerRadius: 8))
                    }
                }
                .padding(.horizontal, 2)
            }
        }
    }
    
    private var mealTypeSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Meal Type")
                .font(.headline)
            
            Picker("Meal Type", selection: $selectedMealType) {
                ForEach(MealType.allCases, id: \.self) { type in
                    Text(type.rawValue.capitalized)
                        .tag(type)
                }
            }
            .pickerStyle(.segmented)
        }
    }
    
    private var restaurantSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Restaurant")
                .font(.headline)
            
            if let restaurant = selectedRestaurant {
                RestaurantCardView(restaurant: restaurant) {
                    selectedRestaurant = nil
                }
            } else {
                Button(action: {
                    // Show restaurant search
                }) {
                    HStack {
                        Image(systemName: "magnifyingglass")
                        Text("Search for restaurant")
                        Spacer()
                        Image(systemName: "chevron.right")
                    }
                    .foregroundColor(.gray)
                    .padding()
                    .background(Color(.systemGray6))
                    .clipShape(RoundedRectangle(cornerRadius: 12))
                }
            }
        }
    }
    
    private var detailsSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("Details")
                .font(.headline)
            
            VStack(spacing: 12) {
                TextField("Meal title", text: $title)
                    .textFieldStyle(.roundedBorder)
                
                TextField("Description (optional)", text: $description, axis: .vertical)
                    .textFieldStyle(.roundedBorder)
                    .lineLimit(3...6)
                
                if selectedMealType == .restaurant {
                    HStack {
                        Text("Rating")
                        Spacer()
                        StarRatingView(rating: $rating)
                    }
                }
                
                if selectedMealType == .homemade {
                    TextField("Ingredients (optional)", text: $ingredients, axis: .vertical)
                        .textFieldStyle(.roundedBorder)
                        .lineLimit(2...4)
                }
            }
        }
    }
    
    private var tagsSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Tags")
                .font(.headline)
            
            HStack {
                TextField("Add tag", text: $newTag)
                    .textFieldStyle(.roundedBorder)
                    .onSubmit {
                        addTag()
                    }
                
                Button("Add", action: addTag)
                    .disabled(newTag.trim().isEmpty)
            }
            
            if !tags.isEmpty {
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack {
                        ForEach(tags, id: \.self) { tag in
                            TagView(tag: tag) {
                                tags.removeAll { $0 == tag }
                            }
                        }
                    }
                    .padding(.horizontal, 2)
                }
            }
        }
    }
    
    private var actionButtons: some View {
        VStack(spacing: 12) {
            Button(action: publishMeal) {
                HStack {
                    if isProcessing {
                        ProgressView()
                            .progressViewStyle(CircularProgressViewStyle(tint: .white))
                            .scaleEffect(0.8)
                    } else {
                        Image(systemName: "checkmark.circle.fill")
                    }
                    Text(isProcessing ? "Publishing..." : "Publish Meal")
                }
                .font(.headline)
                .foregroundColor(.white)
                .frame(maxWidth: .infinity)
                .padding()
                .background(canPublish ? Color.orange : Color.gray)
                .clipShape(RoundedRectangle(cornerRadius: 12))
            }
            .disabled(!canPublish || isProcessing)
            
            Button("Save & Complete Later") {
                saveDraftAndDismiss()
            }
            .font(.subheadline)
            .foregroundColor(.orange)
        }
    }
    
    private var canPublish: Bool {
        guard let draft = selectedDraft else { return false }
        return !draft.photos.isEmpty && !isProcessing
    }
    
    // MARK: - Helper Methods
    
    private func startNewMeal() {
        selectedMealType = .homemade
        currentStep = .photoCapture
        Task {
            do {
                let draft = try await mealService.createDraftMeal(mealType: selectedMealType)
                await MainActor.run {
                    currentDraftId = draft.id
                }
            } catch {
                print("Failed to create draft meal: \(error)")
            }
        }
    }
    
    private func loadDraftMeal(_ draft: MealWithPhotos) {
        selectedDraft = draft
        currentDraftId = draft.id
        
        // Load form data from draft
        selectedMealType = draft.meal.mealType
        title = draft.meal.title ?? ""
        description = draft.meal.description ?? ""
        ingredients = draft.meal.ingredients ?? ""
        tags = draft.meal.tags
        privacy = draft.meal.privacy
        rating = draft.meal.rating ?? 0
        
        currentStep = .mealDetails
    }
    
    private func addPhoto(image: UIImage) {
        let photoWithImage = PhotoWithImage(image: image)
        pendingPhotos.append(photoWithImage)
        
        // Immediately show course selection for the new photo
        selectedPhotoIndex = pendingPhotos.count - 1
        showingCourseSelection = true
    }
    
    private func uploadPendingPhoto(at index: Int) {
        guard let draftId = currentDraftId,
              index < pendingPhotos.count else { return }
        
        let photo = pendingPhotos[index]
        
        Task {
            do {
                _ = try await mealService.addPhotoToMeal(
                    mealId: draftId,
                    image: photo.image,
                    course: photo.course
                )
                
                await MainActor.run {
                    pendingPhotos[index].isUploaded = true
                }
            } catch {
                await MainActor.run {
                    pendingPhotos[index].uploadError = error
                }
                print("Failed to upload photo: \(error)")
            }
        }
    }
    
    private func uploadAllPendingPhotos() {
        guard !pendingPhotos.isEmpty else { return }
        
        isProcessing = true
        
        Task {
            await withTaskGroup(of: Void.self) { group in
                for (index, _) in pendingPhotos.enumerated() {
                    group.addTask {
                        await self.uploadPhoto(at: index)
                    }
                }
            }
            
            await MainActor.run {
                pendingPhotos.removeAll()
                isProcessing = false
                
                // Refresh draft data
                Task {
                    await mealService.fetchDraftMeals()
                    if let draftId = currentDraftId {
                        selectedDraft = mealService.draftMeals.first { $0.id == draftId }
                    }
                }
                
                currentStep = .mealDetails
            }
        }
    }
    
    private func uploadPhoto(at index: Int) async {
        guard let draftId = currentDraftId,
              index < pendingPhotos.count else { return }
        
        let photo = pendingPhotos[index]
        
        do {
            _ = try await mealService.addPhotoToMeal(
                mealId: draftId,
                image: photo.image,
                course: photo.course
            )
            
            await MainActor.run {
                if index < pendingPhotos.count {
                    pendingPhotos[index].isUploaded = true
                }
            }
        } catch {
            await MainActor.run {
                if index < pendingPhotos.count {
                    pendingPhotos[index].uploadError = error
                }
            }
            print("Failed to upload photo: \(error)")
        }
    }
    
    private func addTag() {
        let trimmedTag = newTag.trim()
        if !trimmedTag.isEmpty && !tags.contains(trimmedTag) {
            tags.append(trimmedTag)
            newTag = ""
        }
    }
    
    private func publishMeal() {
        guard let draftId = currentDraftId else { return }
        
        isProcessing = true
        
        Task {
            do {
                // Update draft with current form data
                try await mealService.updateMeal(
                    mealId: draftId,
                    title: title.isEmpty ? nil : title,
                    description: description.isEmpty ? nil : description,
                    ingredients: ingredients.isEmpty ? nil : ingredients,
                    tags: tags,
                    privacy: privacy,
                    rating: rating > 0 ? rating : nil,
                    restaurantId: selectedRestaurant?.id
                )
                
                // Publish the meal
                _ = try await mealService.publishMeal(mealId: draftId)
                
                await MainActor.run {
                    showingSuccess = true
                    isProcessing = false
                }
            } catch {
                await MainActor.run {
                    isProcessing = false
                    // Handle error
                }
                print("Failed to publish meal: \(error)")
            }
        }
    }
    
    private func saveDraftAndDismiss() {
        if let draftId = currentDraftId {
            Task {
                try? await mealService.updateMeal(
                    mealId: draftId,
                    title: title.isEmpty ? nil : title,
                    description: description.isEmpty ? nil : description,
                    ingredients: ingredients.isEmpty ? nil : ingredients,
                    tags: tags.isEmpty ? nil : tags,
                    privacy: privacy,
                    rating: rating > 0 ? rating : nil,
                    restaurantId: selectedRestaurant?.id
                )
                
                await MainActor.run {
                    dismiss()
                }
            }
        } else {
            dismiss()
        }
    }
}

// MARK: - Helper Views

struct StarRatingView: View {
    @Binding var rating: Int
    
    var body: some View {
        HStack(spacing: 4) {
            ForEach(1...5, id: \.self) { star in
                Button(action: {
                    rating = star
                }) {
                    Image(systemName: star <= rating ? "star.fill" : "star")
                        .foregroundColor(star <= rating ? .yellow : .gray)
                }
            }
        }
    }
}

struct TagView: View {
    let tag: String
    let onDelete: () -> Void
    
    var body: some View {
        HStack(spacing: 4) {
            Text(tag)
                .font(.caption)
            
            Button(action: onDelete) {
                Image(systemName: "xmark")
                    .font(.caption2)
            }
        }
        .padding(.horizontal, 8)
        .padding(.vertical, 4)
        .background(Color.orange.opacity(0.2))
        .foregroundColor(.orange)
        .clipShape(Capsule())
    }
}

// MARK: - Extensions

extension String {
    func trim() -> String {
        return self.trimmingCharacters(in: .whitespacesAndNewlines)
    }
}

extension MealPrivacy {
    var displayName: String {
        switch self {
        case .public: return "Public"
        case .friendsOnly: return "Friends Only"
        case .private: return "Private"
        }
    }
}
